<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 width="100%"
		 height="100%"
		 paddingBottom="20"
		 paddingLeft="20"
		 paddingRight="20"
		 paddingTop="20"
		 creationComplete="hbox1_creationCompleteHandler(event)">
	<mx:Script>
		<![CDATA[
			use namespace mx_internal


			import com.starplatina.texture.tile.TileMapManager;

			import flash.utils.setTimeout;

			import mx.core.mx_internal;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;


			private var _tilesManager:TileMapManager;
			private var guideLines:Sprite;
			private var _containerWidth:Number;
			private var _containerHeight:Number;
			private var _previewWindow:previewWindow;




			[Bindable]
			public var saveFile:File;
			[Bindable]
			public var url:String="No directory selected";
			[Bindable]
			private var currentSample:Bitmap;
			[Bindable]
			public var fileNames:Array;
			[Bindable]
			public var wSize:Array=[16, 24, 32, 48, 64, 80, 96];
			[Bindable]
			public var hSize:Array=[16, 24, 32, 48, 64, 80, 96];
			[Bindable]
			public var swSize:Array=[256, 512, 1024, 2048];
			[Bindable]
			public var shSize:Array=[256, 512, 1024, 2048];

			protected function hbox1_creationCompleteHandler(event:FlexEvent):void
			{
				_tilesManager=TileMapManager.getInstance();
				_tilesManager.addEventListener(TileMapManager.FILE_PROCESSED, fileProcessedHandler);
				_tilesManager.addEventListener(TileMapManager.PREVIEW_DATA_GENERATED, previewFileReadyHandler);
				_tilesManager.addEventListener(TileMapManager.NOTIFYCLOSEPOPUPS, closePopupsHandler);
				saveFile=new File();
				
				_previewWindow = new previewWindow();
			}

			protected function fileProcessedHandler(event:Event):void
			{
				fileNames=_tilesManager.fileNames;
				currentSample=new Bitmap(_tilesManager.getBitmapByID(fileNames[0]));
				container.$addChild(currentSample);
				guideLines=new Sprite();
				guideLines.blendMode=BlendMode.INVERT;
				container.$addChild(guideLines);

				setTimeout(function():void
				{
					_containerWidth=container.width;
					_containerHeight=container.height;
					layout();
					redrawGuildLines();
				}, 100);
			}

			protected function button1_clickHandler(event:MouseEvent):void
			{
				_tilesManager.buildTileMap(int(sheetWidthComboBox.selectedLabel), int(sheetHeightComboBox.selectedLabel), int(tileWidthComboBox.selectedLabel), int(tileHeightComboBox.selectedLabel), saveFile, slider.value, scaleFactorSlider.value, true);
				generateButton.enabled=false;
				previewButton.enabled=false;
			}

			protected function combobox1_changeHandler(event:ListEvent):void
			{
				currentSample.bitmapData=_tilesManager.getBitmapByID(fileSelector.selectedLabel);
				layout();
				redrawGuildLines();
			}

			protected function tileSizeChangeHandler(event:ListEvent):void
			{
				redrawGuildLines();
			}

			private function redrawGuideLines(tileWidth:int, tileHeight:int):void
			{
				if (!currentSample)
					return;
				guideLines.graphics.clear();
				guideLines.graphics.lineStyle(1, 0x333333);
				const imageScaleX:Number=currentSample.scaleX;
				const imageScaleY:Number=currentSample.scaleY;
				const hNumber:int=Math.ceil(currentSample.bitmapData.width / tileWidth);
				const vNumber:int=Math.ceil(currentSample.bitmapData.height / tileHeight);

				var squareWidth:Number;
				var squareHeight:Number;
				for (var i:int=0; i < hNumber; i++)
				{
					for (var j:int=0; j < vNumber; j++)
					{
						squareWidth=tileWidth * imageScaleX;
						if (i == hNumber - 1)
						{
							squareWidth=currentSample.bitmapData.width % tileWidth * imageScaleX;
						}
						squareHeight=tileHeight * imageScaleY;
						if (j == vNumber - 1)
						{
							squareHeight=currentSample.bitmapData.height % tileHeight * imageScaleY;
						}
						guideLines.graphics.drawRect(i * tileWidth * imageScaleX, j * tileHeight * imageScaleY, squareWidth, squareHeight);
					}
				}
			}

			private function redrawGuildLines():void
			{
				redrawGuideLines(int(tileWidthComboBox.selectedLabel), int(tileHeightComboBox.selectedLabel));
			}

			private function layout():void
			{
				const containerAspectRatio:Number=_containerWidth / _containerHeight;
				const imageAspectRatio:Number=currentSample.bitmapData.width / currentSample.bitmapData.height;

				var scale:Number;
				if (containerAspectRatio < imageAspectRatio)
				{
					scale=_containerWidth / currentSample.bitmapData.width;
				}
				else
				{
					scale=_containerHeight / currentSample.bitmapData.height;
				}
				currentSample.scaleX=currentSample.scaleY=scale;

				guideLines.x=currentSample.x=(_containerWidth - currentSample.width) * 0.5;
				guideLines.y=currentSample.y=(_containerHeight - currentSample.height) * 0.5;
			}

			protected function sheetWidthComboBox_changeHandler(event:ListEvent):void
			{
				if (forceSquared.selected)
				{
					sheetHeightComboBox.selectedIndex=sheetWidthComboBox.selectedIndex;
				}
			}

			protected function getDIRButton_clickHandler(event:MouseEvent):void
			{
				saveFile.addEventListener(Event.SELECT, dirSelected);
				saveFile.browseForDirectory("Select the folder you want to save files to");
			}

			protected function dirSelected(event:Event):void
			{
				generateButton.enabled=saveFile.isDirectory;
				url=saveFile.nativePath;
			}

			protected function forceSquared_changeHandler(event:Event):void
			{
				if (forceSquared.selected)
				{
					sheetHeightComboBox.selectedIndex=sheetWidthComboBox.selectedIndex;
				}
			}

			protected function previewClickHandler(event:MouseEvent):void
			{
				_tilesManager.buildTileMap(int(sheetWidthComboBox.selectedLabel), int(sheetHeightComboBox.selectedLabel), int(tileWidthComboBox.selectedLabel), int(tileHeightComboBox.selectedLabel), saveFile, slider.value, scaleFactorSlider.value, false);

				generateButton.enabled=false;
				previewButton.enabled=false;
			}

			protected function previewFileReadyHandler(event:Event):void
			{
				_previewWindow.previewBitmap=_tilesManager.previewOutcome;

				PopUpManager.addPopUp(_previewWindow, this, true);
				PopUpManager.centerPopUp(_previewWindow);

				closePopupsHandler();
			}
			
			protected function closePopupsHandler(event:Event = null):void
			{
				generateButton.enabled=true;
				previewButton.enabled=true;
			}
			
		]]>
	</mx:Script>
	<mx:VBox width="100%"
			 height="100%"
			 borderStyle="solid"
			 borderColor="#aaaaaa"
			 paddingBottom="20"
			 paddingLeft="20"
			 paddingRight="20"
			 paddingTop="20"
			 backgroundColor="#111111">
		<mx:HBox>
			<mx:Label color="#AAF0FF"
					  text="Select texture to preview"/>
			<mx:ComboBox id="fileSelector"
						 dataProvider="{fileNames}"
						 width="140"
						 color="#ffffff"
						 change="combobox1_changeHandler(event)"/>
		</mx:HBox>
		<mx:Canvas id="container"
				   borderStyle="solid"
				   borderColor="#aaaaaa"
				   width="100%"
				   height="100%"
				   backgroundColor="#aaaaaa"
				   verticalScrollPolicy="off"
				   horizontalScrollPolicy="off">
		</mx:Canvas>
	</mx:VBox>
	<mx:VBox width="300"
			 height="100%">
		<mx:Form width="100%"
				 fontSize="12"
				 color="#ffffff"
				 label="Parameters"
				 paddingLeft="0"
				 paddingRight="0">
			<mx:FormHeading label="Parameters:"/>
			<mx:FormItem label="Tile width:"
						 paddingLeft="0"
						 paddingRight="0"
						 width="100%">
				<mx:ComboBox id="tileWidthComboBox"
							 width="60"
							 dataProvider="{wSize}"
							 change="tileSizeChangeHandler(event)"/>
			</mx:FormItem>
			<mx:FormItem label="Tile height:"
						 paddingLeft="0"
						 paddingRight="0"
						 width="100%">
				<mx:ComboBox id="tileHeightComboBox"
							 width="60"
							 dataProvider="{hSize}"
							 change="tileSizeChangeHandler(event)"/>
			</mx:FormItem>
			<mx:FormItem label="Force squared"
						 toolTip="Squared sizes is recommended,for some devices or framework environments,squared texture is required."
						 paddingLeft="0"
						 paddingRight="0"
						 width="100%">
				<mx:CheckBox id="forceSquared"
							 selected="true"
							 change="forceSquared_changeHandler(event)"/>
			</mx:FormItem>
			<mx:FormItem label="Sprite sheet width:"
						 paddingLeft="0"
						 paddingRight="0"
						 width="100%">
				<mx:ComboBox id="sheetWidthComboBox"
							 selectedIndex="2"
							 width="80"
							 dataProvider="{swSize}"
							 change="sheetWidthComboBox_changeHandler(event)"/>
			</mx:FormItem>
			<mx:FormItem label="Sprite sheet height:"
						 mouseChildren="{!forceSquared.selected}"
						 alpha="{forceSquared.selected?0.4:1}"
						 paddingLeft="0"
						 paddingRight="0"
						 width="100%">
				<mx:ComboBox id="sheetHeightComboBox"
							 selectedIndex="2"
							 width="80"
							 dataProvider="{shSize}"/>
			</mx:FormItem>
			<mx:FormItem label="Transparency treshold:"
						 direction="vertical"
						 paddingLeft="0"
						 paddingRight="0"
						 width="100%"
						 toolTip="Alpha channel value(0x00-0xff) of each of pixels of each of tiles will be compared with this treshold.A tile will be treated as none-transparent if it includes a pixel that alpha value is bigger than treshold">
				<mx:Label text="{slider.value}"/>
				<mx:HSlider id="slider"
							width="130"
							minimum="0"
							maximum="25"
							value="0"
							snapInterval="1"
							tickInterval="10"
							allowTrackClick="true"
							liveDragging="true"/>
			</mx:FormItem>
			<mx:FormItem label="Scale factor:"
						 direction="vertical"
						 paddingLeft="0"
						 paddingRight="0"
						 width="100%"
						 toolTip="Spritesheet will be resized by mutiplying this factor,all sub textures will be influenced">
				<mx:Label text="{scaleFactorSlider.value}"/>
				<mx:HSlider id="scaleFactorSlider"
							width="130"
							minimum="0"
							maximum="1"
							value="1"
							snapInterval="0.1"
							tickInterval="0.1"
							allowTrackClick="true"
							liveDragging="true"/>
			</mx:FormItem>
			<mx:FormItem label="Output files:"/>
		</mx:Form>
		<mx:VBox width="100%"
				 height="100%"
				 horizontalAlign="right"
				 paddingLeft="30">
			<mx:Text id="dirText"
					 text="{url}"
					 color="#AAF0FF"
					 width="100%"
					 height="60"
					 toolTip="{url}"/>
			<mx:Button id="getDIRButton"
					   label="Choose"
					   click="getDIRButton_clickHandler(event)"/>
		</mx:VBox>
		<mx:Button id="previewButton"
				   label="Preview"
				   width="100%"
				   height="35"
				   click="previewClickHandler(event)"/>
		<mx:Button id="generateButton"
				   enabled="false" color="0xff0000"
				   label="Generate"
				   width="100%"
				   height="50"
				   click="button1_clickHandler(event)"/>
	</mx:VBox>
</mx:HBox>
