<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
		 verticalAlign="middle" horizontalAlign="center" horizontalGap="50" paddingLeft="100" paddingRight="100" creationComplete="creationCompleteHandler(event)">
	<mx:Script>
		<![CDATA[
			/**
			 * 2013.7 Copyright Reserved By Blandon.Du.
			 */
			import com.starplatina.texture.tile.TileMapManager;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			private var _movedIn:Boolean;
			private var _tilesManager:TileMapManager;
			
			[Bindable]
			public function get movedIn() : Boolean
			{
				return _movedIn;
			}
			
			public function set movedIn( value : Boolean ) : void
			{
				_movedIn = value;
				
				if( value )
				{
					borderShape.setStyle( "backgroundColor", 0x66ffb2 );
				}
				else
				{
					borderShape.setStyle( "backgroundColor", 0xA4A4A4 );
				}
			}
			
			
			protected function creationCompleteHandler( event : FlexEvent ) : void
			{
				draginArea.addEventListener( NativeDragEvent.NATIVE_DRAG_ENTER, onDragIn );
				draginArea.addEventListener( NativeDragEvent.NATIVE_DRAG_DROP, onDrop );
				draginArea.addEventListener( NativeDragEvent.NATIVE_DRAG_EXIT, onExit );
			}				
			
			protected function onDragIn(event:NativeDragEvent):void
			{
				movedIn = true;
				var transferable : Clipboard = event.clipboard;
				const files : Array = event.clipboard.getData( ClipboardFormats.FILE_LIST_FORMAT ) as Array;
				if(files.length == 1){		
					if(File(files[0]).isDirectory == false){
						Alert.show("At least provide more than 1 images");
						return;
					}else{
						NativeDragManager.acceptDragDrop( draginArea );
						return;
					}
				}				
				for each (var file:File in files) 
				{
					if(file.isDirectory || file.extension != "png"){
						Alert.show("Make sure all files you are draging are PNG images, or just drag the folder in directly.");
						return;
					}
				}
				NativeDragManager.acceptDragDrop( draginArea );
			}
			
			protected function onExit(event:NativeDragEvent):void
			{
				movedIn = false;
			}
			
			protected function onDrop(event:NativeDragEvent):void
			{
				var dropfiles : Array = event.clipboard.getData( ClipboardFormats.FILE_LIST_FORMAT ) as Array;
				try
				{
					const files:Array = [];
					if(dropfiles.length == 1 && File(dropfiles[0]).isDirectory){
						dropfiles = File(dropfiles[0]).getDirectoryListing();
						for (var i:int = 0; i < dropfiles.length; i++) 
						{
							if(File(dropfiles[i]).extension == "png" || File(dropfiles[i]).extension == "PNG"){
								files.push(dropfiles[i]);
							}
						}
						dropfiles = files;
					}
					if(dropfiles.length == 0){
						Alert.show("Empty folder,please try an other one.");
						return;
					}
					
					readSourceFile(dropfiles);					
				}
				catch( error : Error )
				{
					Alert.show( error.message)//"Some errors occured while reading original files.Please try again." );
					borderShape.setStyle( "backgroundColor", 0xA4A4A4 );	
				}
			}
			
			
			private function readSourceFile(dropfiles:Array):void
			{
				_tilesManager = TileMapManager.getInstance();
				_tilesManager.originalFiles = dropfiles;
			}
			
		]]>
	</mx:Script>
	<mx:VBox id="borderShape" borderStyle="solid" borderColor="#FFFFFF" height="220" width="220"
			 backgroundColor="#A4A4A4" horizontalAlign="center" verticalAlign="middle">
		<mx:VBox id="draginArea" borderStyle="solid" borderColor="#FFFFFF"
				 height="180" width="180"
				 backgroundColor="#222222" horizontalAlign="center" verticalAlign="middle" verticalGap="2">
			
			<mx:Text id="squareText" text="Drop here" width="116" mouseEnabled="false"
					 color="#82D4E5" fontSize="15" textAlign="center"
					 mouseChildren="false" />
		</mx:VBox>
	</mx:VBox>
	<mx:Text  width="100%" text="Drag and drop the folder which contains original png files or these files themselves into the square left hand side."
			 color="#C8C8C8" fontSize="12" textAlign="center" />
</mx:HBox>
